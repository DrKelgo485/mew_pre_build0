function MainComponent({
  activeTab,
  onSend,
  onGenerateSchedule,
  onFormatPDF,
  onConvertImage,
  onEnableFocusMode,
  onOrganizeFiles,
  isPremium,
  onCompressFile,
  onEncryptFile,
  onMergeFiles,
}) {
  const [assistantQuery, setAssistantQuery] = React.useState("");
  const [assistantResponse, setAssistantResponse] = React.useState("");
  const [blockedWebsites, setBlockedWebsites] = React.useState([
    "facebook.com",
    "twitter.com",
    "instagram.com",
  ]);
  const [newWebsite, setNewWebsite] = React.useState("");
  const [isFocusModeEnabled, setIsFocusModeEnabled] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(false);
  const [isWorkFinished, setIsWorkFinished] = React.useState(false);

  const handleQueryChange = (e) => {
    setAssistantQuery(e.target.value);
  };

  const handleSend = async () => {
    if (
      assistantQuery
        .toLowerCase()
        .includes("mewitsu workspace assistant premium") &&
      !isPremium
    ) {
      alert("Subscribe to Mew Assistant Premium now");
      return;
    }

    setIsLoading(true);
    try {
      const response = await handleChatGPTResponse();
      setAssistantResponse(response);
      onSend(response);
    } catch (error) {
      console.error("Error:", error);
      setAssistantResponse(
        "Mew Assistant says: Sorry, I couldn't process your request at the moment.",
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddWebsite = () => {
    const trimmedWebsite = newWebsite.trim();
    if (trimmedWebsite && !blockedWebsites.includes(trimmedWebsite)) {
      setBlockedWebsites((prev) => [...prev, trimmedWebsite]);
      setNewWebsite("");
    }
  };

  const handleRemoveWebsite = (website) => {
    setBlockedWebsites((prev) => prev.filter((site) => site !== website));
  };

  const toggleFocusMode = () => {
    const newFocusModeState = !isFocusModeEnabled;
    setIsFocusModeEnabled(newFocusModeState);
    onEnableFocusMode(newFocusModeState);
    if (newFocusModeState) {
      alert("Mew Assistant says: Stay focused and keep working!");
      checkBlockedWebsites();
    }
  };

  const checkBlockedWebsites = React.useCallback(() => {
    const currentURL = window.location.href;
    blockedWebsites.forEach((website) => {
      if (currentURL.includes(website)) {
        alert(`Access to ${website} is blocked during Focus Mode!`);
      }
    });
  }, [blockedWebsites]);

  React.useEffect(() => {
    if (isFocusModeEnabled) {
      checkBlockedWebsites();
    }
  }, [isFocusModeEnabled, checkBlockedWebsites]);

  const handleContextMenu = (e, action) => {
    e.preventDefault();
    action();
  };

  const handleChatGPTResponse = async () => {
    try {
      const response = await fetch(
        "https://api.openai.com/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer YOUR_API_KEY_HERE",
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: assistantQuery }],
          }),
        },
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error("Error:", error);
      throw error;
    }
  };

  const toggleWorkStatus = () => {
    setIsWorkFinished(!isWorkFinished);
  };

  const renderAssistantTab = () => (
    <div className="space-y-4">
      <h2 className="text-3xl font-bold mb-6 text-purple-100 shadow-sm">
        {isPremium ? "Mew Assistant (Premium)" : "Mew Assistant (Free)"}
      </h2>
      <textarea
        className="w-full h-40 p-3 border-2 border-purple-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-300 bg-purple-800 text-purple-100 placeholder-purple-300 shadow-md"
        placeholder={`Ask your ${
          isPremium ? "premium" : "free"
        } Mew Assistant for help...`}
        name="assistantQuery"
        value={assistantQuery}
        onChange={handleQueryChange}
      />
      <button
        onClick={handleSend}
        onContextMenu={(e) => handleContextMenu(e, handleSend)}
        className={`mt-2 ${
          isPremium
            ? "bg-purple-500 hover:bg-purple-600"
            : "bg-purple-700 hover:bg-purple-800"
        } text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg ${
          isLoading ? "opacity-50 cursor-not-allowed" : ""
        }`}
        disabled={isLoading}
      >
        {isLoading ? "Thinking..." : "Help"}
      </button>
      {assistantResponse && (
        <div className="mt-4 p-3 bg-purple-800 rounded-lg">
          <p className="text-purple-100">{assistantResponse}</p>
        </div>
      )}
      {!isPremium && (
        <p className="mt-2 text-sm text-purple-300 font-medium shadow-sm">
          Upgrade to Mew Assistant Premium for advanced features!
        </p>
      )}
      <button
        onClick={toggleWorkStatus}
        className={`mt-4 ${
          isWorkFinished ? "bg-green-500" : "bg-red-500"
        } text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg`}
      >
        {isWorkFinished ? "Resume Work" : "Finish Work"}
      </button>
    </div>
  );

  const renderAdBlockTab = () => (
    <div className="space-y-4">
      <h2 className="text-3xl font-bold mb-6 text-purple-100 shadow-sm">
        Ad Block
      </h2>
      <p className="text-purple-200 text-lg shadow-sm">
        Ad blocking is currently active. Ads and pop-ups are being blocked.
      </p>
      <div className="mt-4">
        <input
          type="text"
          value={newWebsite}
          onChange={(e) => setNewWebsite(e.target.value)}
          placeholder="Enter website to block"
          className="p-2 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-purple-300 bg-purple-800 text-purple-100"
        />
        <button
          onClick={handleAddWebsite}
          className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-r-lg transition duration-300 ease-in-out"
        >
          Add
        </button>
      </div>
      <ul className="mt-4 space-y-2">
        {blockedWebsites.map((website) => (
          <li
            key={website}
            className="flex justify-between items-center bg-purple-800 p-2 rounded-lg"
          >
            <span>{website}</span>
            <button
              onClick={() => handleRemoveWebsite(website)}
              className="text-red-500 hover:text-red-600"
            >
              Remove
            </button>
          </li>
        ))}
      </ul>
    </div>
  );

  const renderScheduleTab = () => (
    <div className="space-y-4">
      <h2 className="text-3xl font-bold mb-6 text-purple-100 shadow-sm">
        Schedule Maker
      </h2>
      <button
        onClick={onGenerateSchedule}
        onContextMenu={(e) => handleContextMenu(e, onGenerateSchedule)}
        className="bg-purple-700 hover:bg-purple-800 text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg"
      >
        Generate AI Schedule
      </button>
    </div>
  );

  const renderFileToolsTab = () => (
    <div className="space-y-4">
      <h2 className="text-3xl font-bold mb-6 text-purple-100 shadow-sm">
        File Tools
      </h2>
      <div className="grid grid-cols-2 gap-4">
        <button
          onClick={onFormatPDF}
          onContextMenu={(e) => handleContextMenu(e, onFormatPDF)}
          className="bg-purple-700 hover:bg-purple-800 text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg"
        >
          Format PDF
        </button>
        <button
          onClick={onConvertImage}
          onContextMenu={(e) => handleContextMenu(e, onConvertImage)}
          className="bg-purple-700 hover:bg-purple-800 text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg"
        >
          Convert Image
        </button>
        {isPremium && (
          <>
            <button
              onClick={onCompressFile}
              onContextMenu={(e) => handleContextMenu(e, onCompressFile)}
              className="bg-purple-500 hover:bg-purple-600 text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg"
            >
              Compress File
            </button>
            <button
              onClick={onEncryptFile}
              onContextMenu={(e) => handleContextMenu(e, onEncryptFile)}
              className="bg-purple-500 hover:bg-purple-600 text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg"
            >
              Encrypt File
            </button>
            <button
              onClick={onMergeFiles}
              onContextMenu={(e) => handleContextMenu(e, onMergeFiles)}
              className="bg-purple-500 hover:bg-purple-600 text-white px-8 py-3 rounded-lg transition duration-300 ease-in-out font-semibold shadow-lg"
            >
              Merge Files
            </button>
          </>
        )}
      </div>
      {!isPremium && (
        <p className="mt-2 text-sm text-purple-300 font-medium shadow-sm">
          Upgrade to Mew Assistant Premium for advanced file tools!
        </p>
      )}
    </div>
  );

  return (
    <div className="container mx-auto mt-8 p-6 bg-purple-900 rounded-xl shadow-2xl text-purple-100">
      {activeTab === "assistant" && renderAssistantTab()}
      {activeTab === "adblock" && renderAdBlockTab()}
      {activeTab === "schedule" && renderScheduleTab()}
      {activeTab === "filetools" && renderFileToolsTab()}
    </div>
  );
}

function StoryComponent() {
  const [activeTab, setActiveTab] = React.useState("assistant");
  const [isPremium, setIsPremium] = React.useState(false);

  const dummyFunction = () => {
    console.log("Dummy function called");
  };

  return (
    <div className="p-4">
      <div className="mb-4">
        <button
          onClick={() => setActiveTab("assistant")}
          className={`mr-2 px-4 py-2 rounded ${
            activeTab === "assistant" ? "bg-purple-600" : "bg-purple-400"
          }`}
        >
          Assistant
        </button>
        <button
          onClick={() => setActiveTab("adblock")}
          className={`mr-2 px-4 py-2 rounded ${
            activeTab === "adblock" ? "bg-purple-600" : "bg-purple-400"
          }`}
        >
          Ad Block
        </button>
        <button
          onClick={() => setActiveTab("schedule")}
          className={`mr-2 px-4 py-2 rounded ${
            activeTab === "schedule" ? "bg-purple-600" : "bg-purple-400"
          }`}
        >
          Schedule
        </button>
        <button
          onClick={() => setActiveTab("filetools")}
          className={`px-4 py-2 rounded ${
            activeTab === "filetools" ? "bg-purple-600" : "bg-purple-400"
          }`}
        >
          File Tools
        </button>
      </div>
      <div className="mb-4">
        <label className="inline-flex items-center">
          <input
            type="checkbox"
            checked={isPremium}
            onChange={() => setIsPremium(!isPremium)}
            className="form-checkbox h-5 w-5 text-purple-600"
          />
          <span className="ml-2 text-purple-100">Premium User</span>
        </label>
      </div>
      <MainComponent
        activeTab={activeTab}
        onSend={dummyFunction}
        onGenerateSchedule={dummyFunction}
        onFormatPDF={dummyFunction}
        onConvertImage={dummyFunction}
        onEnableFocusMode={dummyFunction}
        onOrganizeFiles={dummyFunction}
        isPremium={isPremium}
        onCompressFile={dummyFunction}
        onEncryptFile={dummyFunction}
        onMergeFiles={dummyFunction}
      />
    </div>
  );
}

